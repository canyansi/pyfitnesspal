{"name":"PyFitnessPal","tagline":"simple django clone of www.myfitnesspal.com","body":"# PyFitnessPal\r\n\r\n*a simple [myfitnesspal](http://www.myfitnesspal.com/) clone made with [django](https://www.djangoproject.com/)*\r\n\r\n## Motivation\r\n\r\nMyFitnessPal makes it very easy to enter data, with a very large database and multiple apps (web, iOS, Android). However, it's not so easy to get reports or data out of it. There's only one [highcharts](http://www.highcharts.com/) based line graph, and no click-to-export anywhere.\r\n\r\nPyFitnessPal doesn't have the features for input or sharing of data with other users, but is _planned_ to be more extensible in the data importing, reporting and exporting departments.\r\n\r\nFeatures To Add:\r\n\r\n- ~~CRUD Food Item~~\r\n- ~~CRUD Daily Log Item~~\r\n- Report\r\n- CRUD Users\r\n- CRUD per-user Daily Log Item\r\n- Tests\r\n- CI\r\n- Heroku Deploy Button\r\n\r\n## Deploy on Heroku\r\n\r\nYou can deploy directly to Heroku with the button below.\r\n\r\n[![Deploy](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy)\r\n\r\nThe one-click deploy will automatically:\r\n\r\n- Initialize the database\r\n- Create a single user specified by you\r\n\r\n### Manual Setps\r\n\r\nAfter deploying, run the Django `migrate` command to initialize your postgres database:\r\n\r\n```sh\r\nheroku clone -a new-app-name\r\nheroku run python manage.py migrate\r\n```\r\n\r\nThen, create your login credentials like this:\r\n\r\n```sh\r\nheroku run python manage.py create_user my_awesome_username supersecretpassword\r\n```\r\n\r\nRun the Django `syncdb` command to set up the root administrator account:\r\n\r\n```sh\r\nheroku run python manage.py syncdb\r\n```\r\n\r\nOnce you've deployed, you can easily clone the app and make modifications:\r\n\r\n```sh\r\nvim templates/login.html\r\ngit add .\r\ngit commit -m \"updating login view\"\r\ngit push heroku master\r\n```\r\n\r\n## Running Locally\r\n\r\nInstall [Python](https://www.python.org/) 2.7.9 locally, and create and activate a virutalenv using the `create_venv.sh` shell script:\r\n\r\n```sh\r\nbrew install python\r\npip install virtualenv\r\n./create_venv.sh\r\n```\r\n\r\nYou must use the [twelve-factor approved method](https://devcenter.heroku.com/articles/getting-started-with-django#django-settings) to specify your database connection url.\r\n\r\nAs an example, if you want the Django, vanilla [sqlite](https://sqlite.org/) setup, set the `DATABASE_URL` environment variable before doing anything with `manage.py`:\r\n\r\n```sh\r\nexport DATABASE_URL=sqlite:///$(pwd)/db.sqlite3\r\n```\r\n\r\nan sqlite backend can also be run in memory:\r\n\r\n```sh\r\nexport DATABASE_URL=sqlite://:memory:\r\n```\r\n\r\nUse [`honcho`](https://honcho.readthedocs.org/en/latest/) to start the application with [gunicorn](http://gunicorn.org), pretty much like Heroku does:\r\n\r\n```sh\r\ncat>>.env<<-EOF\r\nDATABASE_URL=\"sqlite:///$(pwd)/db.sqlite3\"\r\nSECRET_KEY=\"$(./.make_secret.py)\"\r\nPYFITNESSPAL_USERNAME=\"demo\"\r\nPYFITNESSPAL_PASSWORD=\"Passw0rd!\"\r\nEOF\r\n./.venv/bin/python manage.py migrate\r\n./.venv/bin/python manage.py create_user\r\n.venv/bin/honcho start\r\n```\r\n\r\n### Management\r\n\r\nSet up an initial administrator account with the `syncdb` command:\r\n\r\n```sh\r\n./.venv/bin/python manage.py syncdb\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}